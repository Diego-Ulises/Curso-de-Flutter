Programación Declarativa en Flutter
El estilo de programación que utiliza Flutter se llama Programación Declarativa, inspirado en el estilo de programación de React y que va de la mano con el paradigma de Programación Funcional.

Existen dos tipos de estilos de programación:

Programación Imperativa: es el estilo de programación que más se utiliza en lenguajes de programación tradicionales como Lenguaje C, Java, PHP o JavaScript. En general la programación imperativa se fundamenta en el uso de métodos de clases que reciben parámetros o argumentos sencillos para realizar tareas específicas.

Programación Declarativa: este estilo de programación utiliza como parámetros estructuras un poco más complejas formadas por datos compuestos, objetos, pares propiedad-valor, etc. que en cierta forma es más fácil de leer y más comprensible para el desarrollador. Este estilo de programación es el que usa Flutter.

Básicamente ambos estilos de programación hacen lo mismo, producen los mismos resultados, su diferencia radica esencialmente en la legibilidad y la organización del código.

Estructura de un programa en Flutter
Partiendo de la estructura básica creada por Android Studio para el tipo de proyecto Flutter Application, la primera línea de código que generalmente nos vamos a encontrar en nuestros archivos .dart es:

import 'package:flutter/material.dart';
Con esta instrucción importaremos a nuestro código el paquete de todos los Widgets (o la mayoría de ellos) de Material Design que son la base principal de clases con la que trabaja Flutter.

Similar a como es en Java o C++, en Dart, el método main() será el punto de inicio de nuestra aplicación. Por su parte, runApp() es la función que inicializa y da vida a la aplicación definida por el Widget App. En otras palabras, runApp() toma el widget y lo sirve.

App() es la clase principal que representa la raíz de la aplicación. Esta clase extiende o hereda de StatelessWidget que es la clase padre de todos los widgets. App() posee un método heredado llamado build() encargado de construir o mostrar todo el árbol de widgets anidados (o Widgets tree) que hayamos definido con MaterialApp(), que es la clase (que actúa wrapper) que implementa Flutter para dar vida, forma y apariencia a todos los widgets de nuestra interfaz de usuario.

La propiedad fundamental del widget MaterialApp en la que definimos toda la estructura base de nuestra aplicación es home: a la que a su vez asignamos el widget Home() de tipo StatefulWidget que es la parte funcional de nuestra aplicación y que retornará a fin de cuentas un Scaffold() que es el widget que contiene finalmente toda la estructura de nuestra interfaz.

// --- Estructura estándar de un Scaffold
....
return Scaffold(
  appBar:               , // --- barra de título
  body:                 , // --- contenido principal
  bottomNavigationBar:  , // --- navigación
  floatingActionButton:   // --- botón de acción
)
...

Hola Mundo en Flutter
En la propiedad home será donde anidaremos los widgets relacionados con el scaffold de nuestra aplicación. Recordemos que el scaffold contiene la estructura base para una aplicación en Material Design.

La composición básica del scaffold para nuestro Hola Mundo será la siguiente:

...
MaterialApp (
  ...
  home: Scaffold (
    appBar: AppBar(
      title: Text('Hola Mundo')
    ),
    body: Center(
      child: Text('HolaMundo')
    ),
  )
)
Además del appBar y el body, un scaffold estándar también puede incluir un bottomNavigationVar y un floatingActionButton, entre otros widgets.

Es importante tener en cuenta que un error común al definir la estructura de widgets para nuestra aplicación es olvidar colocar el widget correspondiente al Scaffold(). Esto se hace más evidente cuando al previsualizar nuestra app, vemos que los widgets de tipo Text() aparecen con unas rayas amarillas en la parte inferior.

En Flutter, al hacer cambios en el código y guardar el archivo, se actualiza automáticamente la interfaz del emulador, compilando solo la zona modificada, lo que nos permite ver los cambios reflejados casi de manera instantánea.

Widgets básicos
““En Flutter, casi todo es un widget””. Son los componentes elementales de la interfaz de usuario de la aplicación.

Los widgets básicos son el punto de partida con los que puedes comenzar a crear tus propios widgets (compuestos o más complejos) en Flutter.

Text: representa un texto o cadena de caracteres. Admite diversos parámetros o propiedades, además del texto literal que será mostrado. Podemos definirle estilos y características de apariencia particulares.

Row: permite organizar y posicionar otros widgets hijos en forma de fila o renglón.

Column: permite organizar y posicionar otros widgets hijos en forma de columna.

Stack: permite apilar widgets hijos con respecto al eje Z (elevación) en la interfaz.

Container: es uno de los widgets más versátiles de Flutter y permite organizar otros widgets como si fuera una caja o contenedor. Este widget es equivalente a los divs de html y admiten atributos similares de apariencia.

Widgets con estado y sin estado
Flutter dipone principalmente de dos tipos de Widgets:

Widgets con estado o StatefulWidgets
Son todos los widgets con los que el usuario de la aplicación puede tener una interacción directa. Por ejemplo: Checkbox, Radio, Slider, Form. Este tipo de widgets por lo general disparan algún evento, acción o comportamiento determinado como respuesta a la interacción con el usuario.

Widgets sin estado o StatelessWidgets
Los widgets de este tipo no reaccionan ante el intento de interacción con el usuario. No tienen asociado una acción o comportamiento particular. Son estáticos en la interfaz. Por ejemplo: Icono, Texto, Contendor con color, entre otros.

Ambos tipos de widgets heredan sus características y comportamientos de una clase principal Widget.

Análisis de Interfaces de Usuario en Flutter
Analizar las interfaces de usuario para determinar la mejor forma de componer los diferentes grupos de elementos visuales o de interacción que conforman nuestra aplicación es una tarea común entre desarrolladores de aplicaciones móviles. De hecho la propia documentación oficial de Flutter lo recomienda.

El análisis consiste básicamente en identificar o detectar visualmente cuál sería la mejor forma de construir las diferentes secciones de nuestra interfaz, tomando en cuenta los widgets básicos de los cuales disponemos en Flutter. Prever la manera en que pueden ser anidados u organizados los diferentes widgets básicos, incluso determinar qué grupos de widgets pudieran pasar a ser nuevos widgets compuestos nos facilitará mucho el trabajo posterior ya cuando pasemos al código del programa.

Una técnica usada para representar el widget tree resultante del análisis de la interfaz es mediante un diagrama de árbol, en el que cada widget se representa con una símbolo circular en una estructura de dependencias o asociaciones derivadas desplegadas en forma de árbol descendente.

