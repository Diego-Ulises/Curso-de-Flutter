¿Qué es Flutter?
Flutter es un SDK creado por Google, pensado para desarrollar aplicaciones nativas (cross platform) para iOS y Android.

El principal objetivo de Flutter es el diseño de interfaces móviles; sin embargo, esta basado en un lenguaje de programación que permite compartir código fuente para ambas plataformas, lo que facilita el aprovechamiento de la lógica del negocio como un elemento común.

Durante el año 2017 Google hizo la presentación y lanzamiento de Flutter en su versión alpha, luego a principios de 2018 lanzó la primera versión beta y ya para este momento, en diciembre de 2018, está disponible la versión oficial de Flutter 1.0 estable.

Flutter utiliza Dart, un lenguaje de programación también creado por Google y que estaría orientado no solo al desarrollo de aplicaciones móviles sino también de aplicaciones web, incluso se espera que Flutter sea el framework principal para el desarrollo de aplicaciones para Fuschia, el nuevo OS en el que Google se encuentra trabajando.

A diferencia del desarrollo híbrido de aplicaciones móviles basado en un WebView para mostrar código HTML, o el desarrollo bridge que utiliza renderers intermedios de código nativo para la generación de apps, Flutter compila directamente hacia el código final que interactúa con el procesador, saltándose los pasos intermedios, por lo que las aplicaciones resultantes tienen una mejor performance y mayor rendimiento. Flutter usa sus propios Widgets y engine de renderizado llamado Skia Canvas desarrollado en C++.

Dart y Flutter
Dart es el lenguaje de programación que usa Flutter para operar. Es un lenguaje de programación que usa el paradigma de Programación Orientada a Objetos (OOP). Ha sido creado por Google y es considerado por algunos como “el lenguaje de programación del futuro” por su versatilidad de uso.

Dart se puede usar en dispositivos móviles con Flutter; en el desarrollo web, a través de un framework para el desarrollo frontend con JavaScript llamado AngularDart, que es una combinación con Angular; e incluso se puede usar en desarrollo backend a través de frameworks para HTTP servers como Aqueduct.

Aún cuando no se necesitan conocimientos previos específicos para completar este curso, haber trabajado previamente con Dart, con lenguajes de programación orientada a objetos como Java, C++, etc. o haber desarrollado aplicaciones móviles usando los SDKs de Android y iOS en código nativo, con React Native, Xamarin o Ionic, te hará más fácil el camino.

La sintaxis de Dart se parece bastante a Java. Sin embargo, Google ha declarado que Dart está inspirado totalmente en la programación reactiva y estilo de programación de React.js, por lo que si has trabajado anteriormente con este framework (usando styled components) seguro te será fácil comprender y adoptar la sintaxis de Dart.

Flutter para desarrolladores Android, iOS y Xamarin.forms
Android

Todo lo que tenemos en las interfaces de Android como: botones, textos, etiquetas, imágenes, etc., proviene (o es una instancia) de la clase padre View y todos estos elementos en su conjunto, al final, constituirán a su vez un View. El lenguaje de esquematización usado en Android para diseñar y definir la composición de las interfaces es XML.
iOS

De manera similar, en iOS todo lo que tenemos en las interfaces como: botones, textos, etiquetas, etc., proviene (o es una instancia) de la clase principal UIView. Para la composición y diseño de las interfaces iOS cuenta con un entorno gráfico dedicado a esta tarea cuyo componente principal son los Storyboards.
Xamarin / Xamarin.Forms

En el ecosistema de desarrollo multiplataforma de Microsoft y .NET, Xamarin / Xamarin.Forms, los elementos que conforman las interfaces de las aplicaciones: botones, textos, imágenes, etc., son instancias de la clase base Element mientras que para el diseño y composición de la interfaz, el lenguaje de esquematización utilizado es XAML (derivado de XML).
Flutter

En Flutter, el equivalente a los Views, UIViews y Elements, con los que se componen las interfaces de las aplicaciones, son los Widgets, de hecho todo en Flutter es en esencia, un Widget, y la forma en que se diseñan y se componen las interfaces es mediante la definición de árboles de Widgets o Widget tree en los que todos los Widget de la interfaz están organizados de forma anidada y representan atributos o propiedades de este árbol.

Flutter para desarrolladores React Native
Si desarrollas aplicaciones con React Native ya habrás notado que hacerlo con Flutter es muy similar pues utiliza el mismo estilo reactivo.
La principal diferencia es que mientras que React Native transpila (traduce) el código a Widgets Nativos para cada plataforma, Flutter compila todo directamente a Nativo controlando cada pixel de la pantalla para evitar problemas de rendimiento causados por el bridge de JavaScript.
Ahora que estás interesado en aprender Flutter voy a darte un breve recorrido entre lo que maneja React Native y lo que encontrarás en Flutter.
El punto de entrada de una aplicación en React Native está definido por ti a partir de una función
// JavaScript

function startHere() {

  // Can be used as entry point

}
Flutter maneja un punto de entrada ya definido que es la función main
// Dart

main() {

}
Más allá de esto, verás que la manera de funcionar de cada uno es muy similar.
A continuación te presento cómo sería un Hola Mundo con React Native vs. Flutter:
// React Native
import React from "react";
import { StyleSheet, Text, View } from "react-native";

export default class App extends React.Component {
  render() {
    return (
      <View style={styles.container}>
        <Text>Hello world!</Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center"
  }
});


// Flutter
import 'package:flutter/material.dart';

void main() {
  runApp(
    Center(
      child: Text(
        'Hello, world!',
        textDirection: TextDirection.ltr,
      ),
    ),
  );
}
Verás que la verbosidad entre códigos es más reducida en Flutter y esto es gracias al lenguaje de programación Dart y en general la mejora que se está proponiendo con este SDK.

